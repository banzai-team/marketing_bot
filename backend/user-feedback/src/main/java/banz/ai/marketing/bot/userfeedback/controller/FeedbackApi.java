/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package banz.ai.marketing.bot.userfeedback.controller;

import banz.ai.marketing.bot.commons.UserFeedbackDTO;
import banz.ai.marketing.bot.userfeedback.dto.ApiError;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-11-04T21:45:58.716213200+07:00[Asia/Novosibirsk]")
@Validated
@Tag(name = "feedback", description = "the feedback API")
public interface FeedbackApi {

  default Optional<NativeWebRequest> getRequest() {
    return Optional.empty();
  }

  /**
   * POST /feedback : API to post model verdict feedback
   *
   * @param userFeedbackDTO (required)
   * @return feedback successfully posted (status code 201)
   * or error in feedback published (status code 400)
   * or internal server logic error (status code 500)
   */
  @Operation(
          operationId = "postModelFeedback",
          summary = "API to post model verdict feedback",
          responses = {
                  @ApiResponse(responseCode = "201", description = "feedback successfully posted"),
                  @ApiResponse(responseCode = "400", description = "error in feedback published", content = {
                          @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
                  }),
                  @ApiResponse(responseCode = "500", description = "internal server logic error", content = {
                          @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
                  })
          }
  )
  @RequestMapping(
          method = RequestMethod.POST,
          value = "/feedback",
          produces = {"application/json"},
          consumes = {"application/json"}
  )
  default ResponseEntity<Void> postModelFeedback(
          @Parameter(name = "UserFeedbackDTO", description = "", required = true) @Valid @RequestBody UserFeedbackDTO userFeedbackDTO
  ) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }

}
